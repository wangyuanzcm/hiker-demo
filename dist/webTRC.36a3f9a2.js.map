{"mappings":"AAIA,aAEA,MAAMA,SAAWC,SAASC,eAAe,YACnCC,UAAYF,SAASC,eAAe,aACpCE,YAAcH,SAASC,eAAe,eACtCG,MAAQJ,SAASK,cAAc,SAErC,IAAIC,cACAC,aAAc,EACdC,cAAgB,GAQpB,SAASC,iBAAiBC,GACxBX,SAASY,UAAW,EACpBP,MAAMQ,UAAYF,EAClBG,OAAOH,OAASA,EAEhBA,EAAOI,iBAAiB,GAAGC,iBAAiB,SAAS,KACnDC,QAAQ,aACRjB,SAASY,UAAW,EACpBT,UAAUS,UAAW,CAAI,IAE3BT,UAAUS,UAAW,CACvB,CAEA,SAASM,MAAMC,GACbF,QAAQ,2BAA2BE,EAAMC,OAAQD,EACnD,CAEA,SAASF,QAAQI,EAAKF,GACLlB,SAASK,cAAc,QAC/BgB,WAAa,MAAMD,aACL,IAAVF,GACTI,QAAQJ,MAAMA,EAElB,CAgBA,SAASK,aACPhB,aAAc,EACdD,cAAckB,OACdrB,YAAYQ,UAAW,EACvBT,UAAUuB,YAAc,MAC1B,CAEA,SAASC,iBACPlB,cAAgB,GAChB,MACMmB,EAAU,CAAEC,SADDC,wBAAwB,IAGzC,IACEvB,cAAgB,IAAIwB,cAAcjB,OAAOH,OAAQiB,EAInD,CAHE,MAAOI,GAEP,YADAf,QAAQ,sBAAsBgB,KAAKC,UAAUF,KAE/C,CACA7B,UAAUuB,YAAc,OACxBlB,aAAc,EACdJ,YAAYQ,UAAW,EACvBL,cAAc4B,OAAUC,IACtBnB,QAAQ,UAAYmB,EAAA,EAEtB7B,cAAc8B,gBAAkBC,oBAChC/B,cAAcgC,QACdtB,QAAQ,uBAAyBV,cACnC,CAEA,SAAS+B,oBAAoBF,GAC3Bb,QAAQiB,IAAI,sBAAuBJ,GAC/BA,EAAMK,MAAQL,EAAMK,KAAKC,KAAO,GAClCjC,cAAckC,KAAKP,EAAMK,KAE7B,CAEA,SAASxB,QAAQI,GACfE,QAAQiB,IAAInB,GACCpB,SAASK,cAAc,WAC7BgB,WAAa,MAAQD,EAAM,MACpC,CAGA,SAASS,wBAOP,MANsB,CACpB,6BACA,6BACA,8BACA,6BAEmBc,QAAOf,GACnBE,cAAcc,gBAAgBhB,IAEzC,CAlGA7B,SAASgB,iBAAiB,SAAS,KACjC8B,UAAUC,aAAaC,gBAAgB,CAAC3C,OAAO,IAC1C4C,KAAKvC,iBAAkBQ,MAAA,IA6BzB4B,UAAUC,cAAgB,oBAAqBD,UAAUC,aAC5D/C,SAASY,UAAW,EAEpBK,QAAQ,oCAGVd,UAAUa,iBAAiB,SAAS,KAChB,GAAfR,YACDmB,iBAEAH,YAAA,IA2DJpB,YAAYY,iBAAiB,SAAS,KACpC,MAAMkC,EAAO,IAAIC,KAAK1C,cAAe,CAAE2C,KAAM,eACvCC,EAAMvC,OAAOwC,IAAIC,gBAAgBL,GACjCM,EAAIvD,SAASwD,cAAc,KACjCD,EAAEE,MAAMC,QAAU,OAClBH,EAAEI,KAAOP,EACTG,EAAEK,SAAW,OAAQ,IAAIC,MAAOC,UAAY,QAC5C9D,SAAS+D,KAAKC,YAAYT,GAC1BA,EAAEU,QACFC,YAAW,KACTlE,SAAS+D,KAAKI,YAAYZ,GAC1B1C,OAAOwC,IAAIe,gBAAgBhB,EAAA,GAC1B","sources":["webRTC/js/main.js"],"sourcesContent":["/*\n *  分享屏幕\n */\n\n'use strict';\n\nconst startBtn = document.getElementById('startBtn');\nconst recordBtn = document.getElementById('recordBtn');\nconst downloadBtn = document.getElementById('downloadBtn');\nconst video = document.querySelector('video'); // 预览用的\n\nlet mediaRecorder;\nlet isRecording = false;\nlet recordedBlobs = [];\n\nstartBtn.addEventListener('click', () => {\n  navigator.mediaDevices.getDisplayMedia({video: true})\n      .then(gotDisplayStream, onErr);\n});\n\n// 拿到屏幕数据流\nfunction gotDisplayStream(stream) {\n  startBtn.disabled = true;\n  video.srcObject = stream; // 显示出来\n  window.stream = stream;   // 缓存一下\n\n  stream.getVideoTracks()[0].addEventListener('ended', () => {\n    showMsg('用户停止了分享屏幕');\n    startBtn.disabled = false;\n    recordBtn.disabled = true;\n  });\n  recordBtn.disabled = false;\n}\n\nfunction onErr(error) {\n  showMsg(`getDisplayMedia on err: ${error.name}`, error);\n}\n\nfunction showMsg(msg, error) {\n  const msgEle = document.querySelector('#msg');\n  msgEle.innerHTML += `<p>${msg}</p>`;\n  if (typeof error !== 'undefined') {\n    console.error(error);\n  }\n}\n\nif ((navigator.mediaDevices && 'getDisplayMedia' in navigator.mediaDevices)) {\n  startBtn.disabled = false;\n} else {\n  showMsg('getDisplayMedia is not supported');\n}\n\nrecordBtn.addEventListener('click', ()=> {\n  if(isRecording == false) {\n    startRecording();\n  } else {\n    stopRecord();\n  }\n});\n\nfunction stopRecord() {\n  isRecording = false;\n  mediaRecorder.stop();\n  downloadBtn.disabled = false;\n  recordBtn.textContent = \"开始录制\";\n}\n\nfunction startRecording() {\n  recordedBlobs = [];\n  const mimeType = getSupportedMimeTypes()[0];\n  const options = { mimeType };\n\n  try {\n    mediaRecorder = new MediaRecorder(window.stream, options);\n  } catch (e) {\n    showMsg(`创建MediaRecorder出错: ${JSON.stringify(e)}`);\n    return;\n  }\n  recordBtn.textContent = '停止录制';\n  isRecording = true;\n  downloadBtn.disabled = true;\n  mediaRecorder.onstop = (event) => {\n    showMsg('录制停止了: ' + event);\n  };\n  mediaRecorder.ondataavailable = handleDataAvailable;\n  mediaRecorder.start();\n  showMsg('录制开始 mediaRecorder: ' + mediaRecorder);\n}\n\nfunction handleDataAvailable(event) {\n  console.log('handleDataAvailable', event);\n  if (event.data && event.data.size > 0) {\n    recordedBlobs.push(event.data);\n  }\n}\n\nfunction showMsg(msg) {\n  console.log(msg);\n  var msgEle = document.querySelector('div#msg');\n  msgEle.innerHTML += \"<p>\" + msg + \"</p>\";\n}\n\n// 找到支持的格式\nfunction getSupportedMimeTypes() {\n  const possibleTypes = [\n    'video/webm;codecs=vp9,opus',\n    'video/webm;codecs=vp8,opus',\n    'video/webm;codecs=h264,opus',\n    'video/mp4;codecs=h264,aac',\n  ];\n  return possibleTypes.filter(mimeType => {\n    return MediaRecorder.isTypeSupported(mimeType);\n  });\n}\n\ndownloadBtn.addEventListener('click', () => {\n  const blob = new Blob(recordedBlobs, { type: 'video/webm' });\n  const url = window.URL.createObjectURL(blob);\n  const a = document.createElement('a');\n  a.style.display = 'none';\n  a.href = url;\n  a.download = '录屏_' + new Date().getTime() + '.webm';\n  document.body.appendChild(a);\n  a.click();\n  setTimeout(() => {\n    document.body.removeChild(a);\n    window.URL.revokeObjectURL(url);\n  }, 100);\n});"],"names":["startBtn","document","getElementById","recordBtn","downloadBtn","video","querySelector","mediaRecorder","isRecording","recordedBlobs","gotDisplayStream","stream","disabled","srcObject","window","getVideoTracks","addEventListener","showMsg","onErr","error","name","msg","innerHTML","console","stopRecord","stop","textContent","startRecording","options","mimeType","getSupportedMimeTypes","MediaRecorder","e","JSON","stringify","onstop","event","ondataavailable","handleDataAvailable","start","log","data","size","push","filter","isTypeSupported","navigator","mediaDevices","getDisplayMedia","then","blob","Blob","type","url","URL","createObjectURL","a","createElement","style","display","href","download","Date","getTime","body","appendChild","click","setTimeout","removeChild","revokeObjectURL"],"version":3,"file":"webTRC.36a3f9a2.js.map"}